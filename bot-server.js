const express = require('express');
const { TelegramClient, Api } = require('telegram');
const { StringSession } = require('telegram/sessions');
const cors = require('cors');
const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const { pool, initDatabase } = require('./db');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: '100mb' }));

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const uploadDir = path.join(__dirname, 'uploads');
fs.mkdir(uploadDir, { recursive: true }).catch(console.error);

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ uploads
app.use('/uploads', express.static(uploadDir));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
const activeBots = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initializeAllBots() {
  await initDatabase();
  
  try {
    const result = await pool.query('SELECT * FROM bots WHERE is_active = true');
    const bots = result.rows;
    
    console.log(`ü§ñ –ù–∞–π–¥–µ–Ω–æ ${bots.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤`);
    
    for (const bot of bots) {
      try {
        await initializeBotClient(bot);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ ${bot.name}:`, error);
        // –û—Ç–º–µ—á–∞–µ–º –±–æ—Ç–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await pool.query('UPDATE bots SET is_active = false WHERE id = $1', [bot.id]);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ –∏–∑ –ë–î:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞
async function initializeBotClient(botData) {
  const { id, name, token, api_id, api_hash } = botData;
  
  console.log(`üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞: ${name}`);
  
  const client = new TelegramClient(
    new StringSession(''),
    parseInt(api_id),
    api_hash,
    {
      connectionRetries: 5,
      useWSS: false
    }
  );

  await client.start({
    botAuthToken: token,
    onError: (err) => console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ ${name}:`, err),
  });

  const me = await client.getMe();
  console.log(`‚úÖ –ë–æ—Ç ${name} –ø–æ–¥–∫–ª—é—á–µ–Ω: @${me.username} (ID: ${me.id})`);
  
  activeBots.set(id, {
    id,
    name,
    client,
    info: me
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
async function getBotForChannel(chatId) {
  try {
    // –ò—â–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫–∞–Ω–∞–ª–∞ –∫ –±–æ—Ç—É
    const result = await pool.query(
      'SELECT bot_id FROM channel_bot_mapping WHERE chat_id = $1',
      [chatId]
    );
    
    if (result.rows.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${chatId}`);
      
      // –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
      const firstBot = Array.from(activeBots.values())[0];
      if (firstBot) {
        console.log(`üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${firstBot.name}`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        await pool.query(
          'INSERT INTO channel_bot_mapping (chat_id, bot_id) VALUES ($1, $2) ON CONFLICT DO NOTHING',
          [chatId, firstBot.id]
        );
        
        return firstBot;
      }
      
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤');
    }
    
    const botId = result.rows[0].bot_id;
    const bot = activeBots.get(botId);
    
    if (!bot) {
      throw new Error(`–ë–æ—Ç —Å ID ${botId} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω`);
    }
    
    return bot;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
function transliterate(str) {
  const ru = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', 
    '–µ': 'e', '—ë': 'e', '–∂': 'zh', '–∑': 'z', '–∏': 'i', 
    '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', 
    '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', 
    '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', 
    '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', 
    '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D',
    '–ï': 'E', '–Å': 'E', '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I',
    '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N',
    '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T',
    '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'C', '–ß': 'Ch',
    '–®': 'Sh', '–©': 'Sch', '–™': '', '–´': 'Y', '–¨': '',
    '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya',
    ' ': '_'
  };
  
  return str.split('').map(char => ru[char] || char).join('');
}

// –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Make.com
app.post('/download-bot', async (req, res) => {
  const startTime = Date.now();
  let bot = null;
  
  try {
    const { file_id, file_name, message_id, chat_id } = req.body;
    
    console.log(`\nüì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:`);
    console.log(`   –§–∞–π–ª: ${file_name} (${file_id})`);
    console.log(`   –ö–∞–Ω–∞–ª: ${chat_id}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${message_id}`);
    
    if (!file_id || !message_id || !chat_id) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å file_id, message_id –∏ chat_id' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
    bot = await getBotForChannel(chat_id);
    console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–∞: ${bot.name}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
      const messages = await bot.client.invoke(
        new Api.channels.GetMessages({
          channel: await bot.client.getEntity(chat_id),
          id: [new Api.InputMessageID({ id: message_id })]
        })
      );
      
      if (!messages.messages || messages.messages.length === 0) {
        throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      
      const message = messages.messages[0];
      if (!message.media) {
        throw new Error('–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –º–µ–¥–∏–∞');
      }
      
      console.log(`‚è¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ MTProto...`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      const buffer = await bot.client.downloadMedia(message.media, {
        progressCallback: (downloaded, total) => {
          const percent = Math.round((downloaded / total) * 100);
          if (percent % 10 === 0) {
            console.log(`  –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percent}% (${(downloaded / 1024 / 1024).toFixed(2)} / ${(total / 1024 / 1024).toFixed(2)} MB)`);
          }
        }
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π
      const originalFileName = file_name || `file_${Date.now()}.mp4`;
      const transliteratedFileName = transliterate(originalFileName);
      const uploadId = uuidv4();
      const extension = path.extname(transliteratedFileName) || '.mp4';
      const safeFileName = `${uploadId}${extension}`;
      const localPath = path.join(uploadDir, safeFileName);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      await fs.writeFile(localPath, buffer);
      console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${localPath}`);
      
      const stats = await fs.stat(localPath);
      const fileSizeMB = stats.size / 1024 / 1024;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
      const publicDomain = process.env.PUBLIC_DOMAIN || 'telegram-video-proxy38-production.up.railway.app';
      const directUrl = `https://${publicDomain}/uploads/${safeFileName}`;
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      await pool.query(
        `INSERT INTO download_logs (chat_id, bot_id, file_name, file_size, status) 
         VALUES ($1, $2, $3, $4, $5)`,
        [chat_id, bot.id, originalFileName, stats.size, 'success']
      );
      
      const duration = Date.now() - startTime;
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${(duration / 1000).toFixed(2)} —Å–µ–∫`);
      console.log(`üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: ${directUrl}`);
      console.log(`üìä –†–∞–∑–º–µ—Ä: ${fileSizeMB.toFixed(2)} MB`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¢–û–ß–ù–û –ø–µ—Ä–≤—ã–µ 128 –±–∞–π—Ç —Ñ–∞–π–ª–∞ –¥–ª—è hex –ø—Ä–µ–≤—å—é
      const previewBuffer = Buffer.alloc(128); // 128 –±–∞–π—Ç, –ù–ï 180!
      buffer.copy(previewBuffer, 0, 0, 128);
      const hexPreview = previewBuffer.toString('hex'); // 256 —Å–∏–º–≤–æ–ª–æ–≤

      // SHA-1 —Ö–µ—à –ë–ï–ó –æ–±—Ä–µ–∑–∞–Ω–∏—è!
      const hash = crypto.createHash('sha1').update(buffer).digest('hex'); // 40 —Å–∏–º–≤–æ–ª–æ–≤

      // –§–æ—Ä–º–∏—Ä—É–µ–º data-–ø–æ–ª–µ
      const dataField = `IMTBuffer(${stats.size}, binary, ${hash}): ${hexPreview}`;

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log(`üìä Hex preview length: ${hexPreview.length} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 256)`);
      console.log(`üìä Hash length: ${hash.length} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 40)`);
      console.log(`üìä Full data field: ${dataField}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
      let contentType = 'video/mp4';
      if (extension === '.mp4') contentType = 'video/mp4';
      else if (extension === '.mkv') contentType = 'video/x-matroska';
      else if (extension === '.avi') contentType = 'video/x-msvideo';
      else if (extension === '.mov') contentType = 'video/quicktime';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Make.com (–∫–∞–∫ HTTP –º–æ–¥—É–ª—å)
      const makeResponse = {
        statusCode: 200,
        headers: [
          {
            name: "accept-ranges",
            value: "bytes"
          },
          {
            name: "access-control-allow-origin",
            value: "*"
          },
          {
            name: "cache-control",
            value: "public, max-age=0"
          },
          {
            name: "content-length",
            value: stats.size.toString()
          },
          {
            name: "content-type",
            value: contentType
          },
          {
            name: "date",
            value: new Date().toUTCString()
          },
          {
            name: "etag",
            value: `W/"${stats.size.toString(16)}-${Date.now().toString(16)}"`
          },
          {
            name: "last-modified",
            value: new Date().toUTCString()
          },
          {
            name: "server",
            value: "railway-edge"
          },
          {
            name: "x-powered-by",
            value: "Express"
          },
          {
            name: "x-railway-edge",
            value: "railway/us-east4-eqdc4a"
          },
          {
            name: "x-railway-request-id",
            value: uploadId
          }
        ],
        cookieHeaders: [],
        data: `IMTBuffer(${stats.size}, binary, ${hash}): ${hexPreview}`,
        fileSize: stats.size,
        fileName: transliteratedFileName,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        fileUrl: directUrl,
        safeFileName: safeFileName,
        filePath: `videos/${transliteratedFileName}`,
        fileSizeMB: fileSizeMB.toFixed(2),
        botUsed: bot.name,
        duration: duration,
        success: true
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É hex preview
      if (hexPreview.length !== 256) {
        console.error(`‚ùå –û–®–ò–ë–ö–ê: Hex preview –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã: ${hexPreview.length} –≤–º–µ—Å—Ç–æ 256`);
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 256 —Å–∏–º–≤–æ–ª–æ–≤
        hexPreview = hexPreview.substring(0, 256);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      res.json(makeResponse);
      
      // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
      setTimeout(async () => {
        try {
          await fs.unlink(localPath);
          console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${safeFileName}`);
        } catch (e) {}
      }, 30 * 60 * 1000);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ MTProto:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await pool.query(
        `INSERT INTO download_logs (chat_id, bot_id, file_name, status, error_message) 
         VALUES ($1, $2, $3, $4, $5)`,
        [chat_id, bot.id, file_name, 'error', error.message]
      );
      
      return res.status(500).json([{ 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ MTProto',
        details: error.message 
      }]);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    res.status(500).json([{ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    }]);
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö
app.get('/bots-status', async (req, res) => {
  const botsInfo = Array.from(activeBots.values()).map(bot => ({
    id: bot.id,
    name: bot.name,
    username: bot.info.username,
    active: true
  }));
  
  res.json({
    total: botsInfo.length,
    bots: botsInfo
  });
});

// Health check endpoints
app.get('/', (req, res) => {
  res.json({ 
    status: 'OK',
    server: 'Multi-Bot Telegram Video Proxy',
    version: '4.0.0',
    activeBots: activeBots.size,
    adminPanel: `Port ${process.env.ADMIN_PORT || 3001}`
  });
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK',
    uptime: process.uptime(),
    bots: activeBots.size
  });
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
setInterval(async () => {
  try {
    const files = await fs.readdir(uploadDir);
    const now = Date.now();
    
    for (const file of files) {
      if (file === '.gitkeep') continue;
      
      const filePath = path.join(uploadDir, file);
      const stats = await fs.stat(filePath);
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
      if (now - stats.mtimeMs > 60 * 60 * 1000) {
        await fs.unlink(filePath);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: ${file}`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  }
}, 10 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  await initializeAllBots();
  
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:`);
    console.log(`   POST /download-bot  - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤`);
    console.log(`   GET  /bots-status   - –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤`);
    console.log(`   GET  /health        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è`);
    console.log(`   GET  /admin         - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å`);
    console.log(`\nüîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: https://telegram-video-proxy38-production.up.railway.app/admin\n`);
  });
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
  for (const bot of activeBots.values()) {
    if (bot.client && bot.client.connected) {
      await bot.client.disconnect();
    }
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
  await pool.end();
  
  process.exit(0);
});

// ========== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ==========
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω–∫–∏
app.use('/admin', express.static(path.join(__dirname, 'public')));

const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123';
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-me';

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
};

// –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
app.post('/api/login', async (req, res) => {
  const { password } = req.body;
  
  if (!password) {
    return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }

  if (password !== ADMIN_PASSWORD) {
    return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
  }

  const token = jwt.sign({ admin: true }, JWT_SECRET, { expiresIn: '24h' });
  res.json({ token });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
app.get('/api/bots', authMiddleware, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT b.*, COUNT(DISTINCT cbm.id) as channels_count, COUNT(DISTINCT dl.id) as downloads_count
      FROM bots b
      LEFT JOIN channel_bot_mapping cbm ON b.id = cbm.bot_id
      LEFT JOIN download_logs dl ON b.id = dl.bot_id
      GROUP BY b.id
      ORDER BY b.created_at DESC
    `);
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞
app.post('/api/bots', authMiddleware, async (req, res) => {
  const { name, token, api_id, api_hash } = req.body;
  
  if (!name || !token || !api_id || !api_hash) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const result = await pool.query(
      'INSERT INTO bots (name, token, api_id, api_hash) VALUES ($1, $2, $3, $4) RETURNING *',
      [name, token, api_id, api_hash]
    );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å—Ä–∞–∑—É
    try {
      await initializeBotClient(result.rows[0]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    }
    
    res.json(result.rows[0]);
  } catch (error) {
    if (error.code === '23505') {
      res.status(400).json({ error: '–ë–æ—Ç —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    } else {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
app.put('/api/bots/:id', authMiddleware, async (req, res) => {
  const { id } = req.params;
  const { name, token, api_id, api_hash, is_active } = req.body;
  
  try {
    const result = await pool.query(
      `UPDATE bots 
       SET name = $1, token = $2, api_id = $3, api_hash = $4, is_active = $5 
       WHERE id = $6 RETURNING *`,
      [name, token, api_id, api_hash, is_active, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    const botId = parseInt(id);
    if (is_active) {
      try {
        await initializeBotClient(result.rows[0]);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      }
    } else {
      // –û—Ç–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
      const bot = activeBots.get(botId);
      if (bot && bot.client && bot.client.connected) {
        await bot.client.disconnect();
        activeBots.delete(botId);
      }
    }
    
    res.json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞
app.delete('/api/bots/:id', authMiddleware, async (req, res) => {
  const { id } = req.params;
  
  try {
    // –û—Ç–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const botId = parseInt(id);
    const bot = activeBots.get(botId);
    if (bot && bot.client && bot.client.connected) {
      await bot.client.disconnect();
      activeBots.delete(botId);
    }
    
    const result = await pool.query('DELETE FROM bots WHERE id = $1 RETURNING *', [id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ message: '–ë–æ—Ç —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
app.get('/api/mappings', authMiddleware, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT cbm.*, b.name as bot_name 
      FROM channel_bot_mapping cbm
      LEFT JOIN bots b ON cbm.bot_id = b.id
      ORDER BY cbm.created_at DESC
    `);
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–æ–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫–∞–Ω–∞–ª–∞
app.post('/api/mappings', authMiddleware, async (req, res) => {
  const { chat_id, bot_id, channel_name, channel_username } = req.body;
  
  if (!chat_id || !bot_id) {
    return res.status(400).json({ error: 'chat_id –∏ bot_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const result = await pool.query(
      `INSERT INTO channel_bot_mapping (chat_id, bot_id, channel_name, channel_username) 
       VALUES ($1, $2, $3, $4) 
       ON CONFLICT (chat_id) 
       DO UPDATE SET bot_id = $2, channel_name = $3, channel_username = $4
       RETURNING *`,
      [chat_id, bot_id, channel_name, channel_username]
    );
    res.json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É
app.delete('/api/mappings/:id', authMiddleware, async (req, res) => {
  const { id } = req.params;
  
  try {
    const result = await pool.query('DELETE FROM channel_bot_mapping WHERE id = $1 RETURNING *', [id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    res.json({ message: '–ü—Ä–∏–≤—è–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏
app.get('/api/logs', authMiddleware, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT dl.*, b.name as bot_name 
      FROM download_logs dl
      LEFT JOIN bots b ON dl.bot_id = b.id
      ORDER BY dl.created_at DESC
      LIMIT 100
    `);
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∞–¥–º–∏–Ω–∫—É
app.get('/admin', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// ========== –ö–û–ù–ï–¶ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò ==========

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer().catch(console.error);