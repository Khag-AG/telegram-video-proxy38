const express = require('express');
const { TelegramClient, Api } = require('telegram');
const { StringSession } = require('telegram/sessions');
const cors = require('cors');
const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: '100mb' }));

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const uploadDir = path.join(__dirname, 'uploads');
fs.mkdir(uploadDir, { recursive: true }).catch(console.error);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –±–æ—Ç–∞
let botClient = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initializeBot() {
  try {
    const apiId = parseInt(process.env.TELEGRAM_API_ID);
    const apiHash = process.env.TELEGRAM_API_HASH;
    const botToken = process.env.TELEGRAM_BOT_TOKEN;

    if (!apiId || !apiHash || !botToken) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±–æ—Ç–∞
    botClient = new TelegramClient(
      new StringSession(''),
      apiId,
      apiHash,
      {
        connectionRetries: 5,
        useWSS: false
      }
    );

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–∞–∫ –±–æ—Ç
    await botClient.start({
      botAuthToken: botToken,
      onError: (err) => console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err),
    });

    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const me = await botClient.getMe();
    console.log(`ü§ñ –ë–æ—Ç: @${me.username} (ID: ${me.id})`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Make.com
app.post('/download-bot', async (req, res) => {
  try {
    const { file_id, file_name } = req.body;
    
    console.log(`üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ file_id: ${file_id}`);
    
    if (!file_id) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å file_id' 
      });
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ Bot API
      const fileInfo = await botClient.invoke(
        new Api.upload.GetFile({
          location: new Api.InputDocumentFileLocation({
            id: BigInt(file_id.split('_')[0]),
            accessHash: BigInt(0),
            fileReference: Buffer.from(file_id, 'base64'),
            thumbSize: ''
          }),
          offset: BigInt(0),
          limit: 1024 * 1024
        })
      );
      
      console.log('File info:', fileInfo);
      
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ MTProto, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ HTTP API
      console.log('–ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ HTTP API...');
      
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
      const getFileUrl = `https://api.telegram.org/bot${botToken}/getFile?file_id=${file_id}`;
      const fileResponse = await fetch(getFileUrl);
      const fileData = await fileResponse.json();
      
      if (!fileData.ok) {
        return res.status(400).json({ 
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ',
          details: fileData.description 
        });
      }
      
      console.log('File path:', fileData.result.file_path);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const downloadUrl = `https://api.telegram.org/file/bot${botToken}/${fileData.result.file_path}`;
      const downloadResponse = await fetch(downloadUrl);
      
      if (!downloadResponse.ok) {
        return res.status(400).json({ 
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª' 
        });
      }
      
      const buffer = Buffer.from(await downloadResponse.arrayBuffer());
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const fileName = file_name || `file_${Date.now()}.bin`;
      const uploadId = uuidv4();
      const tempFileName = `${uploadId}_${fileName}`;
      const localPath = path.join(uploadDir, tempFileName);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      await fs.writeFile(localPath, buffer);
      console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${localPath}`);
      
      const stats = await fs.stat(localPath);
      
      // –î–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ 95MB - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
      if (stats.size < 95 * 1024 * 1024) {
        res.setHeader('Content-Type', 'application/octet-stream');
        res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
        res.setHeader('Content-Length', stats.size);
        
        const fileBuffer = await fs.readFile(localPath);
        res.send(fileBuffer);
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(async () => {
          try {
            await fs.unlink(localPath);
            console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${tempFileName}`);
          } catch (e) {}
        }, 5000);
        
      } else {
        // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
        const downloadToken = Buffer.from(JSON.stringify({
          uploadId: uploadId,
          fileName: fileName,
          exp: Date.now() + (30 * 60 * 1000) // 30 –º–∏–Ω—É—Ç
        })).toString('base64');
        
        const baseUrl = `https://${req.get('host')}`;
        
        res.json({
          success: true,
          fileName: fileName,
          fileSize: stats.size,
          fileSizeMB: (stats.size / 1024 / 1024).toFixed(2),
          downloadUrl: `${baseUrl}/file/${downloadToken}`,
          expiresIn: '30 minutes'
        });
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
        setTimeout(async () => {
          try {
            await fs.unlink(localPath);
            console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${tempFileName}`);
          } catch (e) {}
        }, 30 * 60 * 1000);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω—É
app.get('/file/:token', async (req, res) => {
  try {
    const { token } = req.params;
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const data = JSON.parse(Buffer.from(token, 'base64').toString());
    
    if (Date.now() > data.exp) {
      return res.status(403).json({ error: '–°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞' });
    }
    
    const tempFileName = `${data.uploadId}_${data.fileName}`;
    const filePath = path.join(uploadDir, tempFileName);
    
    try {
      const stats = await fs.stat(filePath);
      
      res.setHeader('Content-Type', data.mimeType || 'application/octet-stream');
      res.setHeader('Content-Length', stats.size);
      res.setHeader('Content-Disposition', `attachment; filename="${data.fileName}"`);
      
      const stream = require('fs').createReadStream(filePath);
      stream.pipe(res);
      
    } catch (error) {
      res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
  } catch (error) {
    res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
});

// Health check endpoints
app.get('/', (req, res) => {
  res.json({ 
    status: 'OK',
    server: 'Telegram Bot Video Proxy',
    version: '4.0.0',
    bot: botClient ? 'Connected' : 'Not connected'
  });
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK',
    uptime: process.uptime()
  });
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
setInterval(async () => {
  try {
    const files = await fs.readdir(uploadDir);
    const now = Date.now();
    
    for (const file of files) {
      if (file === '.gitkeep') continue;
      
      const filePath = path.join(uploadDir, file);
      const stats = await fs.stat(filePath);
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
      if (now - stats.mtimeMs > 60 * 60 * 1000) {
        await fs.unlink(filePath);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: ${file}`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  }
}, 10 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  await initializeBot();
  
  const PORT = process.env.PORT || 3000;
  
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:`);
    console.log(`   POST /download-bot - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞`);
    console.log(`   GET  /file/:token  - –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤`);
    console.log(`   GET  /health       - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n`);
  });
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  
  if (botClient && botClient.connected) {
    await botClient.disconnect();
  }
  
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer().catch(console.error);