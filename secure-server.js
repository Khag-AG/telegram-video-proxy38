const express = require('express');
const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const cors = require('cors');
const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: '100mb' }));

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const uploadDir = path.join(__dirname, 'uploads');
fs.mkdir(uploadDir, { recursive: true }).catch(console.error);

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏)
const activeClients = new Map();

// –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || crypto.randomBytes(32).toString('hex');
const IV_LENGTH = 16;

function encrypt(text) {
  const iv = crypto.randomBytes(IV_LENGTH);
  const cipher = crypto.createCipheriv(
    'aes-256-cbc', 
    Buffer.from(ENCRYPTION_KEY.slice(0, 32)), 
    iv
  );
  let encrypted = cipher.update(text);
  encrypted = Buffer.concat([encrypted, cipher.final()]);
  return iv.toString('hex') + ':' + encrypted.toString('hex');
}

function decrypt(text) {
  const textParts = text.split(':');
  const iv = Buffer.from(textParts.shift(), 'hex');
  const encryptedText = Buffer.from(textParts.join(':'), 'hex');
  const decipher = crypto.createDecipheriv(
    'aes-256-cbc', 
    Buffer.from(ENCRYPTION_KEY.slice(0, 32)), 
    iv
  );
  let decrypted = decipher.update(encryptedText);
  decrypted = Buffer.concat([decrypted, decipher.final()]);
  return decrypted.toString();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
function createAccessToken(sessionString) {
  const payload = {
    session: sessionString,
    exp: Date.now() + (5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç
  };
  return encrypt(JSON.stringify(payload));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ —Ç–æ–∫–µ–Ω–∞
function getSessionFromToken(token) {
  try {
    const decrypted = decrypt(token);
    const payload = JSON.parse(decrypted);
    
    if (Date.now() > payload.exp) {
      throw new Error('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
    }
    
    return payload.session;
  } catch (error) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
  }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
app.post('/create-token', async (req, res) => {
  try {
    const { sessionString } = req.body;
    
    if (!sessionString || sessionString.length < 400) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏' 
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    const token = createAccessToken(sessionString);
    
    res.json({
      token: token,
      expiresIn: '5 minutes'
    });
    
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
app.post('/download-secure', async (req, res) => {
  let client = null;
  const clientId = uuidv4();
  
  try {
    const { token, channelUsername, fileName, fileSize } = req.body;
    
    if (!token) {
      return res.status(400).json({ 
        error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' 
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const sessionString = getSessionFromToken(token);
    
    console.log(`[Secure] –ó–∞–≥—Ä—É–∑–∫–∞ ${fileName} –∏–∑ ${channelUsername}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    const apiId = parseInt(process.env.TELEGRAM_API_ID);
    const apiHash = process.env.TELEGRAM_API_HASH;
    
    client = new TelegramClient(
      new StringSession(sessionString),
      apiId,
      apiHash,
      { connectionRetries: 3 }
    );
    
    activeClients.set(clientId, client);
    await client.connect();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
    const cleanUsername = channelUsername.replace('@', '');
    const channel = await client.getEntity(cleanUsername);
    
    // –ò—â–µ–º –≤–∏–¥–µ–æ
    const messages = await client.getMessages(channel, { limit: 50 });
    
    let targetMessage = null;
    for (const message of messages) {
      if (message.media && message.media.document) {
        const attrs = message.media.document.attributes || [];
        const fileAttr = attrs.find(attr => attr.fileName === fileName);
        if (fileAttr) {
          targetMessage = message;
          break;
        }
      }
    }
    
    if (!targetMessage) {
      return res.status(404).json({ error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    const uploadId = uuidv4();
    const localPath = path.join(uploadDir, `${uploadId}.mp4`);
    
    await client.downloadMedia(targetMessage, {
      outputFile: localPath,
      progressCallback: (received, total) => {
        const percent = Math.round((received / total) * 100);
        if (percent % 20 === 0) {
          console.log(`[Secure] –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percent}%`);
        }
      }
    });
    
    const stats = await fs.stat(localPath);
    
    // –î–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ 95MB - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
    if (stats.size < 95 * 1024 * 1024) {
      const fileBuffer = await fs.readFile(localPath);
      
      res.setHeader('Content-Type', 'video/mp4');
      res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
      res.send(fileBuffer);
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      setTimeout(() => {
        fs.unlink(localPath).catch(() => {});
      }, 5000);
    } else {
      // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
      const downloadToken = encrypt(JSON.stringify({
        uploadId: uploadId,
        fileName: fileName,
        exp: Date.now() + (15 * 60 * 1000) // 15 –º–∏–Ω—É—Ç
      }));
      
      res.json({
        success: true,
        fileName: fileName,
        fileSize: stats.size,
        downloadToken: downloadToken,
        downloadUrl: `https://${req.get('host')}/download-file/${downloadToken}`
      });
    }
    
  } catch (error) {
    console.error('[Secure] –û—à–∏–±–∫–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      details: error.message 
    });
  } finally {
    // –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    if (client) {
      try {
        await client.disconnect();
      } catch (e) {}
      activeClients.delete(clientId);
    }
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/download-file/:token', async (req, res) => {
  try {
    const { token } = req.params;
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
    const data = JSON.parse(decrypt(token));
    
    if (Date.now() > data.exp) {
      return res.status(403).json({ error: '–°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞' });
    }
    
    const filePath = path.join(uploadDir, `${data.uploadId}.mp4`);
    const stats = await fs.stat(filePath);
    
    res.setHeader('Content-Type', 'video/mp4');
    res.setHeader('Content-Length', stats.size);
    res.setHeader('Content-Disposition', `attachment; filename="${data.fileName}"`);
    
    const stream = require('fs').createReadStream(filePath);
    stream.pipe(res);
    
    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    stream.on('end', () => {
      setTimeout(() => {
        fs.unlink(filePath).catch(() => {});
      }, 5000);
    });
    
  } catch (error) {
    res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

// –û—á–∏—Å—Ç–∫–∞
setInterval(async () => {
  // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
  for (const [id, client] of activeClients) {
    if (!client.connected) {
      activeClients.delete(id);
    }
  }
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
  try {
    const files = await fs.readdir(uploadDir);
    const now = Date.now();
    
    for (const file of files) {
      const filePath = path.join(uploadDir, file);
      const stats = await fs.stat(filePath);
      
      if (now - stats.mtimeMs > 30 * 60 * 1000) { // 30 –º–∏–Ω—É—Ç
        await fs.unlink(filePath);
        console.log(`–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: ${file}`);
      }
    }
  } catch (error) {}
}, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// Health check endpoint
app.get('/', (req, res) => {
  res.json({ 
    status: 'OK',
    server: 'Telegram Video Proxy',
    version: '3.0.0'
  });
});

// Health check –¥–ª—è Railway
app.get('/health', (req, res) => {
  res.json({ status: 'OK' });
});

app.listen(PORT, () => {
  console.log(`\nüîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`\n–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ${ENCRYPTION_KEY.substring(0, 10)}...`);
});